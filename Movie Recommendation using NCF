{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "000c5577",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:57.876711Z",
     "iopub.status.busy": "2025-01-11T20:04:57.876366Z",
     "iopub.status.idle": "2025-01-11T20:04:58.600787Z",
     "shell.execute_reply": "2025-01-11T20:04:58.599773Z"
    },
    "papermill": {
     "duration": 0.732896,
     "end_time": "2025-01-11T20:04:58.602374",
     "exception": false,
     "start_time": "2025-01-11T20:04:57.869478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.occupation\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u1.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.info\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u4.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.item\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/README\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u1.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/ua.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.data\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u5.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/mku.sh\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u5.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.user\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/ub.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u4.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u2.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/ua.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u3.test\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u.genre\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/allbut.pl\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u3.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/u2.base\n",
      "/kaggle/input/movielens-100k-dataset/ml-100k/ub.test\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3465cca0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.610698Z",
     "iopub.status.busy": "2025-01-11T20:04:58.610355Z",
     "iopub.status.idle": "2025-01-11T20:04:58.681237Z",
     "shell.execute_reply": "2025-01-11T20:04:58.680253Z"
    },
    "papermill": {
     "duration": 0.07676,
     "end_time": "2025-01-11T20:04:58.683037",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.606277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/movielens-100k-dataset/ml-100k/u.data', sep='\\t', header=None, names=['userId', 'movieId', 'rating','timestamp'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9c96a85f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.692444Z",
     "iopub.status.busy": "2025-01-11T20:04:58.692150Z",
     "iopub.status.idle": "2025-01-11T20:04:58.706801Z",
     "shell.execute_reply": "2025-01-11T20:04:58.705988Z"
    },
    "papermill": {
     "duration": 0.020486,
     "end_time": "2025-01-11T20:04:58.708099",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.687613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>movieId</th>\n",
       "      <th>rating</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>242</td>\n",
       "      <td>3</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186</td>\n",
       "      <td>302</td>\n",
       "      <td>3</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>377</td>\n",
       "      <td>1</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>166</td>\n",
       "      <td>346</td>\n",
       "      <td>1</td>\n",
       "      <td>886397596</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  movieId  rating  timestamp\n",
       "0     196      242       3  881250949\n",
       "1     186      302       3  891717742\n",
       "2      22      377       1  878887116\n",
       "3     244       51       2  880606923\n",
       "4     166      346       1  886397596"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a2ddeb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.715955Z",
     "iopub.status.busy": "2025-01-11T20:04:58.715714Z",
     "iopub.status.idle": "2025-01-11T20:04:58.721600Z",
     "shell.execute_reply": "2025-01-11T20:04:58.720812Z"
    },
    "papermill": {
     "duration": 0.011247,
     "end_time": "2025-01-11T20:04:58.723025",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.711778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['rating'] = (df['rating'] >= 4).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "274418b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.730871Z",
     "iopub.status.busy": "2025-01-11T20:04:58.730616Z",
     "iopub.status.idle": "2025-01-11T20:04:58.736987Z",
     "shell.execute_reply": "2025-01-11T20:04:58.736244Z"
    },
    "papermill": {
     "duration": 0.011576,
     "end_time": "2025-01-11T20:04:58.738276",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.726700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>movieId</th>\n",
       "      <th>rating</th>\n",
       "      <th>timestamp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>196</td>\n",
       "      <td>242</td>\n",
       "      <td>0</td>\n",
       "      <td>881250949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186</td>\n",
       "      <td>302</td>\n",
       "      <td>0</td>\n",
       "      <td>891717742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>377</td>\n",
       "      <td>0</td>\n",
       "      <td>878887116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>880606923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>166</td>\n",
       "      <td>346</td>\n",
       "      <td>0</td>\n",
       "      <td>886397596</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userId  movieId  rating  timestamp\n",
       "0     196      242       0  881250949\n",
       "1     186      302       0  891717742\n",
       "2      22      377       0  878887116\n",
       "3     244       51       0  880606923\n",
       "4     166      346       0  886397596"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aee4a36a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.747055Z",
     "iopub.status.busy": "2025-01-11T20:04:58.746835Z",
     "iopub.status.idle": "2025-01-11T20:04:58.757428Z",
     "shell.execute_reply": "2025-01-11T20:04:58.756638Z"
    },
    "papermill": {
     "duration": 0.016208,
     "end_time": "2025-01-11T20:04:58.758595",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.742387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[['movieId','userId']].values\n",
    "y = df['rating'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b8196d52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:58.766305Z",
     "iopub.status.busy": "2025-01-11T20:04:58.766081Z",
     "iopub.status.idle": "2025-01-11T20:04:59.874044Z",
     "shell.execute_reply": "2025-01-11T20:04:59.873334Z"
    },
    "papermill": {
     "duration": 1.113564,
     "end_time": "2025-01-11T20:04:59.875688",
     "exception": false,
     "start_time": "2025-01-11T20:04:58.762124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test, y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ab86e84",
   "metadata": {
    "papermill": {
     "duration": 0.003524,
     "end_time": "2025-01-11T20:04:59.883127",
     "exception": false,
     "start_time": "2025-01-11T20:04:59.879603",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#  Neural Collaborative Filtering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "64824700",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:04:59.891314Z",
     "iopub.status.busy": "2025-01-11T20:04:59.890942Z",
     "iopub.status.idle": "2025-01-11T20:05:06.891090Z",
     "shell.execute_reply": "2025-01-11T20:05:06.890365Z"
    },
    "papermill": {
     "duration": 7.005901,
     "end_time": "2025-01-11T20:05:06.892642",
     "exception": false,
     "start_time": "2025-01-11T20:04:59.886741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers\n",
    "class CollaborativeFiltering(tf.keras.Model):\n",
    "    def __init__(self,movie_vocab_size, user_vocab_size,latent_dim):\n",
    "        super().__init__()\n",
    "        self.P = layers.Embedding(input_dim=movie_vocab_size,output_dim=latent_dim)\n",
    "        self.Q = layers.Embedding(input_dim=user_vocab_size, output_dim=latent_dim)\n",
    "        self.U = layers.Embedding(input_dim=movie_vocab_size,output_dim=latent_dim)\n",
    "        self.V = layers.Embedding(input_dim=user_vocab_size, output_dim=latent_dim)\n",
    "        self.mlp = tf.keras.Sequential([\n",
    "            layers.Dense(24, activation='relu'),\n",
    "            layers.Dense(24, activation='relu'),\n",
    "            layers.Dense(24, activation='relu'),\n",
    "            layers.Flatten()\n",
    "        ])\n",
    "        self.output_layer = layers.Dense(1, activation='sigmoid',use_bias=False)\n",
    "        \n",
    "\n",
    "    def call(self,x):\n",
    "        movie,user = x\n",
    "        movie = tf.reshape(movie,[-1,1])\n",
    "        user = tf.reshape(user, [-1,1])\n",
    "        p_mf = self.P(movie)\n",
    "        q_mf = self.Q(user)\n",
    "        gmf = p_mf*q_mf\n",
    "\n",
    "        p_mlp = self.U(movie)\n",
    "        q_mlp = self.V(user)\n",
    "        \n",
    "        # Concatenate along axis 1\n",
    "        mlp = tf.concat([p_mlp, q_mlp], axis=1)\n",
    "        mlp = self.mlp(mlp)\n",
    "        gmf = layers.Flatten()(gmf)\n",
    "        output = self.output_layer(tf.concat([gmf,mlp],axis=1))\n",
    "        return output\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0434567f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:06.901409Z",
     "iopub.status.busy": "2025-01-11T20:05:06.900951Z",
     "iopub.status.idle": "2025-01-11T20:05:06.904638Z",
     "shell.execute_reply": "2025-01-11T20:05:06.903963Z"
    },
    "papermill": {
     "duration": 0.009166,
     "end_time": "2025-01-11T20:05:06.905872",
     "exception": false,
     "start_time": "2025-01-11T20:05:06.896706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "movie_id = df['movieId']\n",
    "user_id = df['userId']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "224f57c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:06.913761Z",
     "iopub.status.busy": "2025-01-11T20:05:06.913511Z",
     "iopub.status.idle": "2025-01-11T20:05:06.928483Z",
     "shell.execute_reply": "2025-01-11T20:05:06.927808Z"
    },
    "papermill": {
     "duration": 0.020151,
     "end_time": "2025-01-11T20:05:06.929629",
     "exception": false,
     "start_time": "2025-01-11T20:05:06.909478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = CollaborativeFiltering(len(movie_id.unique()),len(user_id.unique()),24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "973a863f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:06.937433Z",
     "iopub.status.busy": "2025-01-11T20:05:06.937224Z",
     "iopub.status.idle": "2025-01-11T20:05:06.951291Z",
     "shell.execute_reply": "2025-01-11T20:05:06.950467Z"
    },
    "papermill": {
     "duration": 0.019195,
     "end_time": "2025-01-11T20:05:06.952444",
     "exception": false,
     "start_time": "2025-01-11T20:05:06.933249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"collaborative_filtering\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"collaborative_filtering\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (\u001b[38;5;33mSequential\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cd266b4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:06.961398Z",
     "iopub.status.busy": "2025-01-11T20:05:06.961188Z",
     "iopub.status.idle": "2025-01-11T20:05:06.974061Z",
     "shell.execute_reply": "2025-01-11T20:05:06.973415Z"
    },
    "papermill": {
     "duration": 0.018519,
     "end_time": "2025-01-11T20:05:06.975227",
     "exception": false,
     "start_time": "2025-01-11T20:05:06.956708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"collaborative_filtering\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"collaborative_filtering\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (\u001b[38;5;33mSequential\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a6e34bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:06.985106Z",
     "iopub.status.busy": "2025-01-11T20:05:06.984896Z",
     "iopub.status.idle": "2025-01-11T20:05:07.605552Z",
     "shell.execute_reply": "2025-01-11T20:05:07.604697Z"
    },
    "papermill": {
     "duration": 0.626986,
     "end_time": "2025-01-11T20:05:07.606868",
     "exception": false,
     "start_time": "2025-01-11T20:05:06.979882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"collaborative_filtering\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"collaborative_filtering\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)              │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ ?                           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_2 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding_3 (\u001b[38;5;33mEmbedding\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ sequential (\u001b[38;5;33mSequential\u001b[0m)              │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ ?                           │     \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "optimizer = tf.keras.optimizers.Adagrad (learning_rate=0.01)\n",
    "loss_fn = tf.keras.losses.BinaryCrossentropy()\n",
    "model.compile(optimizer=optimizer, loss=loss_fn, metrics=['accuracy',tf.keras.metrics.AUC()])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c5e25448",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:05:07.618130Z",
     "iopub.status.busy": "2025-01-11T20:05:07.617866Z",
     "iopub.status.idle": "2025-01-11T20:06:57.142691Z",
     "shell.execute_reply": "2025-01-11T20:06:57.141881Z"
    },
    "papermill": {
     "duration": 109.531917,
     "end_time": "2025-01-11T20:06:57.144043",
     "exception": false,
     "start_time": "2025-01-11T20:05:07.612126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 5ms/step - accuracy: 0.5550 - auc: 0.5025 - loss: 0.6889 - val_accuracy: 0.5546 - val_auc: 0.5488 - val_loss: 0.6862\n",
      "Epoch 2/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.5563 - auc: 0.5608 - loss: 0.6853 - val_accuracy: 0.5546 - val_auc: 0.5949 - val_loss: 0.6840\n",
      "Epoch 3/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.5500 - auc: 0.6128 - loss: 0.6835 - val_accuracy: 0.5546 - val_auc: 0.6339 - val_loss: 0.6781\n",
      "Epoch 4/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.5594 - auc: 0.6499 - loss: 0.6737 - val_accuracy: 0.6054 - val_auc: 0.6639 - val_loss: 0.6632\n",
      "Epoch 5/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.6237 - auc: 0.6889 - loss: 0.6533 - val_accuracy: 0.6539 - val_auc: 0.7003 - val_loss: 0.6347\n",
      "Epoch 6/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.6693 - auc: 0.7223 - loss: 0.6188 - val_accuracy: 0.6834 - val_auc: 0.7389 - val_loss: 0.5992\n",
      "Epoch 7/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.6948 - auc: 0.7592 - loss: 0.5816 - val_accuracy: 0.6957 - val_auc: 0.7581 - val_loss: 0.5819\n",
      "Epoch 8/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7084 - auc: 0.7763 - loss: 0.5633 - val_accuracy: 0.7023 - val_auc: 0.7667 - val_loss: 0.5740\n",
      "Epoch 9/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.7128 - auc: 0.7790 - loss: 0.5597 - val_accuracy: 0.7082 - val_auc: 0.7718 - val_loss: 0.5686\n",
      "Epoch 10/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7226 - auc: 0.7909 - loss: 0.5482 - val_accuracy: 0.7119 - val_auc: 0.7746 - val_loss: 0.5653\n",
      "Epoch 11/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7201 - auc: 0.7894 - loss: 0.5488 - val_accuracy: 0.7132 - val_auc: 0.7757 - val_loss: 0.5634\n",
      "Epoch 12/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7248 - auc: 0.7945 - loss: 0.5436 - val_accuracy: 0.7130 - val_auc: 0.7765 - val_loss: 0.5630\n",
      "Epoch 13/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.7266 - auc: 0.7974 - loss: 0.5400 - val_accuracy: 0.7132 - val_auc: 0.7765 - val_loss: 0.5629\n",
      "Epoch 14/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.7281 - auc: 0.7983 - loss: 0.5393 - val_accuracy: 0.7139 - val_auc: 0.7770 - val_loss: 0.5629\n",
      "Epoch 15/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7287 - auc: 0.7978 - loss: 0.5390 - val_accuracy: 0.7138 - val_auc: 0.7770 - val_loss: 0.5622\n",
      "Epoch 16/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7271 - auc: 0.7941 - loss: 0.5429 - val_accuracy: 0.7153 - val_auc: 0.7773 - val_loss: 0.5620\n",
      "Epoch 17/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7320 - auc: 0.7991 - loss: 0.5365 - val_accuracy: 0.7146 - val_auc: 0.7775 - val_loss: 0.5619\n",
      "Epoch 18/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7292 - auc: 0.7982 - loss: 0.5378 - val_accuracy: 0.7144 - val_auc: 0.7775 - val_loss: 0.5619\n",
      "Epoch 19/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7302 - auc: 0.8016 - loss: 0.5356 - val_accuracy: 0.7161 - val_auc: 0.7776 - val_loss: 0.5622\n",
      "Epoch 20/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7299 - auc: 0.7994 - loss: 0.5374 - val_accuracy: 0.7150 - val_auc: 0.7776 - val_loss: 0.5618\n",
      "Epoch 21/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7279 - auc: 0.7980 - loss: 0.5388 - val_accuracy: 0.7144 - val_auc: 0.7776 - val_loss: 0.5620\n",
      "Epoch 22/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7321 - auc: 0.8019 - loss: 0.5349 - val_accuracy: 0.7151 - val_auc: 0.7777 - val_loss: 0.5621\n",
      "Epoch 23/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7267 - auc: 0.7962 - loss: 0.5404 - val_accuracy: 0.7152 - val_auc: 0.7778 - val_loss: 0.5618\n",
      "Epoch 24/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7287 - auc: 0.8010 - loss: 0.5357 - val_accuracy: 0.7144 - val_auc: 0.7777 - val_loss: 0.5619\n",
      "Epoch 25/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7293 - auc: 0.8008 - loss: 0.5352 - val_accuracy: 0.7147 - val_auc: 0.7778 - val_loss: 0.5620\n",
      "Epoch 26/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7291 - auc: 0.7987 - loss: 0.5375 - val_accuracy: 0.7154 - val_auc: 0.7775 - val_loss: 0.5627\n",
      "Epoch 27/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7313 - auc: 0.8019 - loss: 0.5345 - val_accuracy: 0.7149 - val_auc: 0.7777 - val_loss: 0.5621\n",
      "Epoch 28/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7312 - auc: 0.7989 - loss: 0.5372 - val_accuracy: 0.7146 - val_auc: 0.7777 - val_loss: 0.5621\n",
      "Epoch 29/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7300 - auc: 0.8013 - loss: 0.5346 - val_accuracy: 0.7147 - val_auc: 0.7778 - val_loss: 0.5623\n",
      "Epoch 30/30\n",
      "\u001b[1m1000/1000\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.7298 - auc: 0.7995 - loss: 0.5364 - val_accuracy: 0.7145 - val_auc: 0.7776 - val_loss: 0.5625\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    x=[x_train[:,0],x_train[:,1]],y=y_train,\n",
    "    epochs=30,\n",
    "    batch_size=64,\n",
    "    validation_split=0.2,\n",
    "    callbacks=[tf.keras.callbacks.TensorBoard(log_dir='./logs')]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "be45a5e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:06:57.327322Z",
     "iopub.status.busy": "2025-01-11T20:06:57.326992Z",
     "iopub.status.idle": "2025-01-11T20:06:57.917593Z",
     "shell.execute_reply": "2025-01-11T20:06:57.916740Z"
    },
    "papermill": {
     "duration": 0.683834,
     "end_time": "2025-01-11T20:06:57.919096",
     "exception": false,
     "start_time": "2025-01-11T20:06:57.235262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def plot_history(history):\n",
    "    plt.figure(figsize=(12, 6))\n",
    "\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(history.history['loss'], label='Train Loss')\n",
    "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "    plt.title('Model Loss')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.legend(loc='upper right')\n",
    "\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "    plt.title('Model Accuracy')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.legend(loc='lower right')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "plot_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6ae59ed4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:06:58.107913Z",
     "iopub.status.busy": "2025-01-11T20:06:58.107525Z",
     "iopub.status.idle": "2025-01-11T20:06:59.868261Z",
     "shell.execute_reply": "2025-01-11T20:06:59.867557Z"
    },
    "papermill": {
     "duration": 1.855495,
     "end_time": "2025-01-11T20:06:59.869540",
     "exception": false,
     "start_time": "2025-01-11T20:06:58.014045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step - accuracy: 0.7055 - auc: 0.7681 - loss: 0.5735\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy, auc = model.evaluate([x_test[:,0],x_test[:,1]],y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "005b4f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-11T20:07:00.099200Z",
     "iopub.status.busy": "2025-01-11T20:07:00.098904Z",
     "iopub.status.idle": "2025-01-11T20:07:00.103950Z",
     "shell.execute_reply": "2025-01-11T20:07:00.103216Z"
    },
    "papermill": {
     "duration": 0.143021,
     "end_time": "2025-01-11T20:07:00.105147",
     "exception": false,
     "start_time": "2025-01-11T20:06:59.962126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loss:  0.5728702545166016\n",
      "Accuracy:  0.7046999931335449\n",
      "AUC:  0.7688055038452148\n"
     ]
    }
   ],
   "source": [
    "print(\"Loss: \",loss)\n",
    "print(\"Accuracy: \", accuracy)\n",
    "print(\"AUC: \",auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d41c3d3e",
   "metadata": {
    "papermill": {
     "duration": 0.091863,
     "end_time": "2025-01-11T20:07:00.290088",
     "exception": false,
     "start_time": "2025-01-11T20:07:00.198225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 626,
     "sourceId": 1187,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30823,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 126.450373,
   "end_time": "2025-01-11T20:07:02.005312",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-11T20:04:55.554939",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
